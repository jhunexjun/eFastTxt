<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        BQUFBRwEHRkZGRkXEQ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBhwXGxsZGRkcDRIFGAUFBQUFBQUFBQUF
        BQUFBQUFBRMOFBcZGxkZGQkNERIGBQUFBQUFBQUFBQUFBQUFBQUFBBMLFxkZGRkXAwoaDRAFBQUFBQUF
        BQUFBQUFBQUFBQUFBQsWFxcXCQMPDw0NDhgFBQUFBQUFBQUFBQUFBQUFBQUTFBEVFQMEAg8CDQ0UBgUF
        BQUFBQUFBQUFBQUFBQUFBQ8FAQ8EBAQEBAIDDRESBQUFBQUFBQUFBQUFBQUFBQUFBQUGAgQEBAQEBAMN
        DhAFBQUFBQUFBQUFBQUFBQUFBQUFDxAPCAgICAgICA0OBgUFBQUFBQUFBQUFBQUFBQUFBQUFBQEIBwcH
        BwcJDQ4FBQUFBQUFBQUFBQUFBQUFBQUFBQULBQgMDAwHCAkDBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF
        BgcHCAkKBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUBAgMDBAUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF
        BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQX+f/h/+B/gH/APwA/AD4AHgAcAA4AGAAOAAgABgAAAAYAA
        AAHAAAABwAAAAcAAAAHgAAAB4AAAA+AAAAPwAAAH8AAAD/AAMD/4AD//+AAf//gAH//4AB///AAP//wA
        D//8AA///gAP//4AD///AB///wA///+A////wf///////ygAAAAQAAAAIAAAAAEACAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAEBAQAEZAOwB8cGkAqJ6ZAL6zpwC3pooAlHNLACIbFQCJfncAppOBAGA9
        HwAYFRIANjErAJeMhACShoAAhnlvAF87DQATEQ8AiHZLANi5UQDYvW4Ad15DAGU9BgDUt1gA+9hjAG9J
        GwBKNRwAOC4lAEUsCgBqV0QAm5GKACUaDgAeHR0Ag2A5AJOEdwCglo8Aj4N5AE0yDwD53KoA+8iJAPup
        VABvUjcALSQbAJ6EaACVe10AkHdcAGpKIgAsHgsA/OrCAPv47AD88MUAUDgsAFBBMQCRdlcAhmtOAF49
        EgAlIRwA/PTeAPzovQD82Z8A/MB4APWgSgCPQhUAhnJbAJuBZACJbU4AfWRJAEkvDADujUAA/OrIAOqO
        TAC6VyAANS8oAKN+UwCCZEEAb1Y3ANhbHgDztoIA88iWAOWCRgDge0wAnFQiAIpZHQCIakcAWDwZADs4
        NADOgFQA+uK+APz14AD0u4QASSwYADkjBwA5JAkAV1FLAMmqfgD2xqgA+NC3APbZrgBxVDUAW1xdACUl
        JABgYWEANxwMAEgjDAAZDwcAaGdpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD///8AAAAEAxJlAAAAZmdoaWoAAAADElwXXQMAXl9gYWJjZAAEEhpTVFVWAFdY
        WVlYWlsqBElKQUtMMANNTjFPUFFSNAABQEFCQ0QhRTxGKClHSDQAAzUsNjc4OQQ6Ozw9Pj8qAAQrLC0u
        LzACMTIzKCk0AAAAISIjJCUmIScoKCkqAAAAAAMeHwYVEyAEAAAAAAAAAAAEHBUZGRUdAgAAAAAAAAAA
        AA0YGRkVGhsEAAAAAAAAAAADExQVAxYXAwAAAAAAAAAABA0JDg8QERIAAAAAAAAAAAABCQQECgsMAAAA
        AAAAAAAABAIFBgcIAwAAAAAAAAAAAAABAgMDBAAAAAAAAMODAACBAQAAAQAAAAAAAACAAAAAgAAAAIAB
        AADAAwAAwD8AAMA/AADgHwAA4B8AAOAfAADwHwAA8B8AAPg/AAA=
</value>
  </data>
</root>